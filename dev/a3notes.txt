# On lab systems ... (NOT ON CSLINUX!!!!!)
# Setup for the files here

npm init
# npm init creates a package.json
# http://browsenpm.org/package.json
# https://docs.npmjs.com/files/package.json

# We are adding the ws libraries, they will be in our local node_modules
npm install --save express
npm install --save ws
npm install --save JSON

# check out the package.json now
# check out node_modules

# We are adding the ws libraries, they will be in our local node_modules

# use this one to get the static content
nodejs express-static.js & # run this one in the background

# try this one first...
nodejs echoServerSimple.js
# http://localhost:8000/echoClient.html
# Explain why this works!! That is, why you get the html and jquery.js
# Open another browser window, are the messages broadcast?
# Take a look at the echoServerSimple.js and explain what it is doing.

# next try this one...
nodejs echoServerBroadcast.js
# http://localhost:8000/echoClient.html
# Open another browser window, are the messages broadcast?
# Take a look at the echoServerBroadcast.js and explain what it is doing.

# Finally, try the scribble app with the above two servers.

# 0) echoServerBroadcast.js has been sorted, unsort it so that it functions
#    as in class, that is, so that multiple clients can connect and draw on
#    the shared canvas.
#
# 1) create app.js, which combines echoServerBroadcast.js and express-static.js
#    into a single application. Hint: You can still use two ports.
#
# 2) Modify both app.js and scribble.js so that each individual connection
#    draws in their own color. Hint: Have the server choose a random color
#    and assign it to the connection.
#
# 3) Modify both app.js and scribble.js so that instead of drawing dots
#    continuous lines are drawn.
#
